// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cppJSD
double cppJSD(const Rcpp::NumericVector& x, const Rcpp::NumericVector& y);
RcppExport SEXP _speedmat_cppJSD(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cppJSD(x, y));
    return rcpp_result_gen;
END_RCPP
}
// distJSD
Rcpp::NumericMatrix distJSD(const Rcpp::NumericMatrix& inMatrix);
RcppExport SEXP _speedmat_distJSD(SEXP inMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type inMatrix(inMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(distJSD(inMatrix));
    return rcpp_result_gen;
END_RCPP
}
// distJSD2
Rcpp::NumericMatrix distJSD2(const Rcpp::NumericMatrix& inMatrixTr, const Rcpp::NumericMatrix& inMatrixCo);
RcppExport SEXP _speedmat_distJSD2(SEXP inMatrixTrSEXP, SEXP inMatrixCoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type inMatrixTr(inMatrixTrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type inMatrixCo(inMatrixCoSEXP);
    rcpp_result_gen = Rcpp::wrap(distJSD2(inMatrixTr, inMatrixCo));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_speedmat_cppJSD", (DL_FUNC) &_speedmat_cppJSD, 2},
    {"_speedmat_distJSD", (DL_FUNC) &_speedmat_distJSD, 1},
    {"_speedmat_distJSD2", (DL_FUNC) &_speedmat_distJSD2, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_speedmat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
